services:

  network_application:
    image: ${UNIFI_NETWORK_IMAGE}
    restart: unless-stopped
    depends_on:
      - mongo_db
    environment:
      - PUID=${UNIFI_USER_ID}
      - PGID=${UNIFI_GROUP_ID}
      - TZ=${UNIFI_TIME_ZONE}
      - MONGO_USER=${UNIFI_MONGO_USER}
      - MONGO_PASS=${UNIFI_MONGO_PASSWORD}
      - MONGO_DBNAME=${UNIFI_MONGO_DB}
      - MONGO_HOST=mongo_db
      - MONGO_PORT=27017
    volumes:
      - ${UNIFI_DATA_DIR}/data:/config
    ports:
      - 8080:8080/tcp
      - 8443:8443/tcp
      - 3478:3478/udp
      - 10001:10001/udp

  mongo_db:
    image: ${UNIFI_MONGO_IMAGE}
    restart: unless-stopped
    configs:
      - source: init-mongo.js
        target: /docker-entrypoint-initdb.d/init-mongo.js
    env_file:
      - ./.env
    volumes:
      - ${UNIFI_DATA_DIR}/db/data:/data/db
      - ${UNIFI_DATA_DIR}/db/config:/data/configdb

configs:
  init-mongo.js:
    content: |
      const user = process.env.UNIFI_MONGO_USER;
      const pwd = process.env.UNIFI_MONGO_PASSWORD;
      const data_db = process.env.UNIFI_MONGO_DB;
      const cfg_db = data_db + '_stat';
      db.getSiblingDB(data_db).createUser({ user: user, pwd: pwd, roles: [{ role: 'dbOwner', db: data_db }], });
      db.getSiblingDB(cfg_db).createUser({ user: user, pwd: pwd, roles: [{ role: 'dbOwner', db: cfg_db }], });
